{"ast":null,"code":"import { useState } from 'react';\nexport const config = {\n  funReg: /^set/,\n  private: false\n};\nexport const observe = (state, options = config) => {\n  var _s = $RefreshSig$();\n\n  if (options.funReg === undefined) options.funReg = config.funReg;\n  if (!options.private === undefined) options.private = config.private;\n  const reflashQueue = [];\n\n  const renderNode = () => {\n    const length = reflashQueue.length;\n\n    for (let i = 0; i < length; i++) {\n      const [r, reflash] = reflashQueue.shift();\n      reflash(r + 1);\n    }\n  };\n\n  const stateProxy = new Proxy(state, {\n    get(target, key) {\n      if (key.match(options.funReg) && options.private) {\n        target[key].bind(new Proxy(state, {\n          set(target, key) {\n            target[key] = value;\n            renderNode();\n            return true;\n          }\n\n        }));\n        return target[key];\n      }\n\n      return target[key];\n    },\n\n    set(target, key, value) {\n      console.log(222);\n      if (options.private) return false;\n      if (key.match(options.funReg)) return false;\n      target[key] = value;\n      renderNode();\n      return true;\n    }\n\n  });\n  return _s(() => {\n    _s();\n\n    reflashQueue.push(useState(0));\n    return stateProxy;\n  }, \"rGEI62VsuwnwPY/75ViYiWAYY24=\");\n};","map":{"version":3,"sources":["C:/Users/HL/Desktop/erwin/src/utils.js"],"names":["useState","config","funReg","private","observe","state","options","undefined","reflashQueue","renderNode","length","i","r","reflash","shift","stateProxy","Proxy","get","target","key","match","bind","set","value","console","log","push"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,MAAM,EAAG,MADS;AAElBC,EAAAA,OAAO,EAAE;AAFS,CAAf;AAIP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAOC,OAAO,GAAGL,MAAjB,KAA4B;AAAA;;AAC/C,MAAGK,OAAO,CAACJ,MAAR,KAAmBK,SAAtB,EAAiCD,OAAO,CAACJ,MAAR,GAAiBD,MAAM,CAACC,MAAxB;AACjC,MAAG,CAACI,OAAO,CAACH,OAAT,KAAqBI,SAAxB,EAAmCD,OAAO,CAACH,OAAR,GAAkBF,MAAM,CAACE,OAAzB;AACnC,QAAMK,YAAY,GAAG,EAArB;;AACA,QAAMC,UAAU,GAAG,MAAI;AACnB,UAAMC,MAAM,GAAGF,YAAY,CAACE,MAA5B;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,MAAd,EAAqBC,CAAC,EAAtB,EAAyB;AACrB,YAAM,CAACC,CAAD,EAAGC,OAAH,IAAcL,YAAY,CAACM,KAAb,EAApB;AACAD,MAAAA,OAAO,CAACD,CAAC,GAAC,CAAH,CAAP;AACH;AACJ,GAND;;AAOA,QAAMG,UAAU,GAAG,IAAIC,KAAJ,CAAUX,KAAV,EAAgB;AAC/BY,IAAAA,GAAG,CAACC,MAAD,EAAQC,GAAR,EAAY;AACX,UAAGA,GAAG,CAACC,KAAJ,CAAUd,OAAO,CAACJ,MAAlB,KAA6BI,OAAO,CAACH,OAAxC,EAAiD;AAC7Ce,QAAAA,MAAM,CAACC,GAAD,CAAN,CAAYE,IAAZ,CAAiB,IAAIL,KAAJ,CAAUX,KAAV,EAAgB;AAC7BiB,UAAAA,GAAG,CAACJ,MAAD,EAAQC,GAAR,EAAY;AACXD,YAAAA,MAAM,CAACC,GAAD,CAAN,GAAcI,KAAd;AACAd,YAAAA,UAAU;AACV,mBAAO,IAAP;AACH;;AAL4B,SAAhB,CAAjB;AAQA,eAAOS,MAAM,CAACC,GAAD,CAAb;AACH;;AACD,aAAOD,MAAM,CAACC,GAAD,CAAb;AACH,KAd8B;;AAe/BG,IAAAA,GAAG,CAACJ,MAAD,EAAQC,GAAR,EAAYI,KAAZ,EAAkB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAGnB,OAAO,CAACH,OAAX,EAAoB,OAAO,KAAP;AACpB,UAAGgB,GAAG,CAACC,KAAJ,CAAUd,OAAO,CAACJ,MAAlB,CAAH,EAA8B,OAAO,KAAP;AAC9BgB,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcI,KAAd;AACAd,MAAAA,UAAU;AACV,aAAO,IAAP;AACH;;AAtB8B,GAAhB,CAAnB;AAwBA,YAAO,MAAI;AAAA;;AACPD,IAAAA,YAAY,CAACkB,IAAb,CAAkB1B,QAAQ,CAAC,CAAD,CAA1B;AACA,WAAOe,UAAP;AACH,GAHD;AAIH,CAvCM","sourcesContent":["import {useState} from 'react';\r\nexport const config = {\r\n    funReg : /^set/,\r\n    private: false\r\n}\r\nexport const observe = (state,options = config ) =>{\r\n    if(options.funReg === undefined) options.funReg = config.funReg;\r\n    if(!options.private === undefined) options.private = config.private;\r\n    const reflashQueue = [];\r\n    const renderNode = ()=>{\r\n        const length = reflashQueue.length;\r\n        for(let i=0;i<length;i++){\r\n            const [r,reflash] = reflashQueue.shift();\r\n            reflash(r+1);\r\n        }\r\n    }\r\n    const stateProxy = new Proxy(state,{\r\n        get(target,key){\r\n            if(key.match(options.funReg) && options.private) {\r\n                target[key].bind(new Proxy(state,{\r\n                    set(target,key){\r\n                        target[key] = value;\r\n                        renderNode();\r\n                        return true;\r\n                    }\r\n                }))\r\n               \r\n                return target[key];\r\n            }\r\n            return target[key]\r\n        },\r\n        set(target,key,value){\r\n            console.log(222);\r\n            if(options.private) return false;\r\n            if(key.match(options.funReg)) return false;\r\n            target[key] = value;\r\n            renderNode()\r\n            return true;\r\n        }\r\n    })\r\n    return ()=>{\r\n        reflashQueue.push(useState(0))\r\n        return stateProxy\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}