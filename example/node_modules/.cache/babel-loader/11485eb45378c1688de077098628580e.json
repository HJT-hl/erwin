{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const config = {\n  funReg: /^set/,\n  private: false\n};\nexport const observe = (state, options = config) => {\n  var _s = $RefreshSig$();\n\n  if (options.funReg === undefined) options.funReg = config.funReg;\n  if (options.private === undefined) options.private = config.private;\n  const reflashQueue = [];\n  let index = 0;\n\n  const renderNode = () => {\n    const length = reflashQueue.length;\n\n    for (let i = 0; i < length - index; i++) {\n      reflashQueue.shift()();\n    }\n\n    index = 0;\n  };\n\n  const stateProxy = new Proxy(state, {\n    get(target, key) {\n      if (key.match(options.funReg) && options.private) {\n        const privateFun = (...arg) => {\n          target[key].apply(new Proxy(state, {\n            set(target, key, value) {\n              target[key] = value;\n              renderNode();\n              return true;\n            }\n\n          }), arg);\n        };\n\n        return privateFun;\n      }\n\n      return target[key];\n    },\n\n    set(target, key, value) {\n      if (options.private) return false;\n      if (key.match(options.funReg)) return false;\n      if (target[key] === value) return true;\n      target[key] = value;\n      renderNode();\n      return true;\n    }\n\n  });\n  return _s(() => {\n    _s();\n\n    const [r, reflash] = useState(0);\n    reflashQueue.push(() => reflash(r + 1));\n    useEffect(() => {\n      return () => {\n        reflashQueue.splice(reflashQueue.findIndex(item => state === item), 1);\n        index++;\n      };\n    });\n    return stateProxy;\n  }, \"+peOt/AzCMGYf53uARQzBAmstBU=\");\n};","map":{"version":3,"sources":["F:/erwin/example/src/utils.js"],"names":["useState","useEffect","config","funReg","private","observe","state","options","undefined","reflashQueue","index","renderNode","length","i","shift","stateProxy","Proxy","get","target","key","match","privateFun","arg","apply","set","value","r","reflash","push","splice","findIndex","item"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,MAAM,EAAG,MADS;AAElBC,EAAAA,OAAO,EAAE;AAFS,CAAf;AAIP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAOC,OAAO,GAAGL,MAAjB,KAA4B;AAAA;;AAC/C,MAAGK,OAAO,CAACJ,MAAR,KAAmBK,SAAtB,EAAiCD,OAAO,CAACJ,MAAR,GAAiBD,MAAM,CAACC,MAAxB;AACjC,MAAGI,OAAO,CAACH,OAAR,KAAoBI,SAAvB,EAAkCD,OAAO,CAACH,OAAR,GAAkBF,MAAM,CAACE,OAAzB;AAClC,QAAMK,YAAY,GAAG,EAArB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,QAAMC,UAAU,GAAG,MAAI;AACnB,UAAMC,MAAM,GAAGH,YAAY,CAACG,MAA5B;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,MAAM,GAACF,KAArB,EAA2BG,CAAC,EAA5B,EAA+B;AAC3BJ,MAAAA,YAAY,CAACK,KAAb;AACH;;AACDJ,IAAAA,KAAK,GAAG,CAAR;AACH,GAND;;AAOA,QAAMK,UAAU,GAAG,IAAIC,KAAJ,CAAUV,KAAV,EAAgB;AAC/BW,IAAAA,GAAG,CAACC,MAAD,EAAQC,GAAR,EAAY;AACX,UAAGA,GAAG,CAACC,KAAJ,CAAUb,OAAO,CAACJ,MAAlB,KAA6BI,OAAO,CAACH,OAAxC,EAAiD;AAC7C,cAAMiB,UAAU,GAAG,CAAC,GAAGC,GAAJ,KAAU;AACzBJ,UAAAA,MAAM,CAACC,GAAD,CAAN,CAAYI,KAAZ,CAAkB,IAAIP,KAAJ,CAAUV,KAAV,EAAgB;AAC9BkB,YAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjBP,cAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACAd,cAAAA,UAAU;AACV,qBAAO,IAAP;AACH;;AAL6B,WAAhB,CAAlB,EAMGW,GANH;AAOH,SARD;;AAUA,eAAOD,UAAP;AACH;;AACD,aAAOH,MAAM,CAACC,GAAD,CAAb;AACH,KAhB8B;;AAiB/BK,IAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjB,UAAGlB,OAAO,CAACH,OAAX,EAAoB,OAAO,KAAP;AACpB,UAAGe,GAAG,CAACC,KAAJ,CAAUb,OAAO,CAACJ,MAAlB,CAAH,EAA8B,OAAO,KAAP;AAC9B,UAAGe,MAAM,CAACC,GAAD,CAAN,KAAgBM,KAAnB,EAA0B,OAAO,IAAP;AAC1BP,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACAd,MAAAA,UAAU;AACV,aAAO,IAAP;AACH;;AAxB8B,GAAhB,CAAnB;AA0BA,YAAO,MAAI;AAAA;;AACP,UAAM,CAACe,CAAD,EAAGC,OAAH,IAAc3B,QAAQ,CAAC,CAAD,CAA5B;AACAS,IAAAA,YAAY,CAACmB,IAAb,CAAkB,MAAID,OAAO,CAACD,CAAC,GAAC,CAAH,CAA7B;AACAzB,IAAAA,SAAS,CAAC,MAAI;AACV,aAAO,MAAI;AACPQ,QAAAA,YAAY,CAACoB,MAAb,CAAoBpB,YAAY,CAACqB,SAAb,CAAuBC,IAAI,IAAEzB,KAAK,KAAGyB,IAArC,CAApB,EAA+D,CAA/D;AACArB,QAAAA,KAAK;AACR,OAHD;AAIH,KALQ,CAAT;AAMA,WAAOK,UAAP;AACH,GAVD;AAWH,CAjDM","sourcesContent":["import {useState,useEffect} from 'react';\r\nexport const config = {\r\n    funReg : /^set/,\r\n    private: false\r\n}\r\nexport const observe = (state,options = config ) =>{\r\n    if(options.funReg === undefined) options.funReg = config.funReg;\r\n    if(options.private === undefined) options.private = config.private;\r\n    const reflashQueue = [];\r\n    let index = 0;\r\n    const renderNode = ()=>{\r\n        const length = reflashQueue.length;\r\n        for(let i=0;i<length-index;i++){\r\n            reflashQueue.shift()();\r\n        }\r\n        index = 0;\r\n    }\r\n    const stateProxy = new Proxy(state,{\r\n        get(target,key){\r\n            if(key.match(options.funReg) && options.private) {\r\n                const privateFun = (...arg)=>{\r\n                    target[key].apply(new Proxy(state,{\r\n                        set(target,key,value){\r\n                            target[key] = value;\r\n                            renderNode();\r\n                            return true;\r\n                        }\r\n                    }),arg)\r\n                }\r\n               \r\n                return privateFun;\r\n            }\r\n            return target[key]\r\n        },\r\n        set(target,key,value){\r\n            if(options.private) return false;\r\n            if(key.match(options.funReg)) return false;\r\n            if(target[key] === value) return true;\r\n            target[key] = value;\r\n            renderNode()\r\n            return true;\r\n        }\r\n    })\r\n    return ()=>{\r\n        const [r,reflash] = useState(0)\r\n        reflashQueue.push(()=>reflash(r+1))\r\n        useEffect(()=>{\r\n            return ()=>{\r\n                reflashQueue.splice(reflashQueue.findIndex(item=>state===item),1);\r\n                index ++;\r\n            }\r\n        })\r\n        return stateProxy\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}