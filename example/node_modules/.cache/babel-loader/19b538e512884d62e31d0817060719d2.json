{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const config = {\n  funReg: /^set/,\n  private: false\n};\nexport const observe = (state, options = config) => {\n  var _s = $RefreshSig$();\n\n  if (options.funReg === undefined) options.funReg = config.funReg;\n  if (options.private === undefined) options.private = config.private;\n  let reflashQueue = [];\n  let index = 0;\n\n  const renderNode = () => {\n    const length = reflashQueue.length;\n\n    for (let i = 0; i < length; i++) {\n      const {\n        isUnmounted,\n        state: [r, reflash],\n        index\n      } = reflashQueue.shift();\n\n      if (!isUnmounted) {\n        console.log(index);\n        reflash(r + 1 >= Number.MAX_SAFE_INTEGER - 9999 ? 0 : r + 1);\n      }\n    }\n  };\n\n  const stateProxy = new Proxy(state, {\n    get(target, key) {\n      if (key.match(options.funReg) && options.private) {\n        const privateFun = (...arg) => {\n          target[key].apply(new Proxy(state, {\n            set(target, key, value) {\n              target[key] = value;\n              renderNode();\n              return true;\n            }\n\n          }), arg);\n        };\n\n        return privateFun;\n      }\n\n      return target[key];\n    },\n\n    set(target, key, value) {\n      if (options.private) return false;\n      if (key.match(options.funReg)) return false;\n      target[key] = value;\n      renderNode();\n      return true;\n    }\n\n  });\n  return _s(() => {\n    _s();\n\n    let state = useState(0);\n    const reflash = {\n      isUnmounted: false,\n      state,\n      index: index++\n    };\n    reflashQueue.push(reflash);\n    useEffect(() => {\n      return () => {\n        reflash.isUnmounted = true;\n        console.log(reflash);\n      };\n    }, []);\n    return stateProxy;\n  }, \"yF8Lz4mDm7yybMfGslz5X6/OrUY=\");\n};","map":{"version":3,"sources":["F:/erwin/example/src/utils.js"],"names":["useState","useEffect","config","funReg","private","observe","state","options","undefined","reflashQueue","index","renderNode","length","i","isUnmounted","r","reflash","shift","console","log","Number","MAX_SAFE_INTEGER","stateProxy","Proxy","get","target","key","match","privateFun","arg","apply","set","value","push"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,MAAM,EAAG,MADS;AAElBC,EAAAA,OAAO,EAAE;AAFS,CAAf;AAIP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAOC,OAAO,GAAGL,MAAjB,KAA4B;AAAA;;AAC/C,MAAGK,OAAO,CAACJ,MAAR,KAAmBK,SAAtB,EAAiCD,OAAO,CAACJ,MAAR,GAAiBD,MAAM,CAACC,MAAxB;AACjC,MAAGI,OAAO,CAACH,OAAR,KAAoBI,SAAvB,EAAkCD,OAAO,CAACH,OAAR,GAAkBF,MAAM,CAACE,OAAzB;AAClC,MAAIK,YAAY,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,QAAMC,UAAU,GAAG,MAAI;AACnB,UAAMC,MAAM,GAAGH,YAAY,CAACG,MAA5B;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,MAAd,EAAqBC,CAAC,EAAtB,EAAyB;AACrB,YAAM;AAACC,QAAAA,WAAD;AAAaR,QAAAA,KAAK,EAAG,CAACS,CAAD,EAAGC,OAAH,CAArB;AAAiCN,QAAAA;AAAjC,UAA0CD,YAAY,CAACQ,KAAb,EAAhD;;AACA,UAAG,CAACH,WAAJ,EAAgB;AACZI,QAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAM,QAAAA,OAAO,CAACD,CAAC,GAAC,CAAF,IAAOK,MAAM,CAACC,gBAAP,GAA0B,IAAjC,GAAwC,CAAxC,GAA4CN,CAAC,GAAG,CAAjD,CAAP;AACH;AACJ;AACJ,GATD;;AAUA,QAAMO,UAAU,GAAG,IAAIC,KAAJ,CAAUjB,KAAV,EAAgB;AAC/BkB,IAAAA,GAAG,CAACC,MAAD,EAAQC,GAAR,EAAY;AACX,UAAGA,GAAG,CAACC,KAAJ,CAAUpB,OAAO,CAACJ,MAAlB,KAA6BI,OAAO,CAACH,OAAxC,EAAiD;AAC7C,cAAMwB,UAAU,GAAG,CAAC,GAAGC,GAAJ,KAAU;AAEzBJ,UAAAA,MAAM,CAACC,GAAD,CAAN,CAAYI,KAAZ,CAAkB,IAAIP,KAAJ,CAAUjB,KAAV,EAAgB;AAC9ByB,YAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjBP,cAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACArB,cAAAA,UAAU;AACV,qBAAO,IAAP;AACH;;AAL6B,WAAhB,CAAlB,EAMGkB,GANH;AAOH,SATD;;AAWA,eAAOD,UAAP;AACH;;AACD,aAAOH,MAAM,CAACC,GAAD,CAAb;AACH,KAjB8B;;AAkB/BK,IAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjB,UAAGzB,OAAO,CAACH,OAAX,EAAoB,OAAO,KAAP;AACpB,UAAGsB,GAAG,CAACC,KAAJ,CAAUpB,OAAO,CAACJ,MAAlB,CAAH,EAA8B,OAAO,KAAP;AAC9BsB,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACArB,MAAAA,UAAU;AACV,aAAO,IAAP;AACH;;AAxB8B,GAAhB,CAAnB;AA0BA,YAAO,MAAI;AAAA;;AACP,QAAIL,KAAK,GAAGN,QAAQ,CAAC,CAAD,CAApB;AACA,UAAOgB,OAAO,GAAG;AAACF,MAAAA,WAAW,EAAC,KAAb;AAAoBR,MAAAA,KAApB;AAA0BI,MAAAA,KAAK,EAAGA,KAAK;AAAvC,KAAjB;AACAD,IAAAA,YAAY,CAACwB,IAAb,CAAkBjB,OAAlB;AACAf,IAAAA,SAAS,CAAC,MAAI;AACV,aAAO,MAAI;AACPe,QAAAA,OAAO,CAACF,WAAR,GAAsB,IAAtB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACH,OAHD;AAIH,KALQ,EAKP,EALO,CAAT;AAMA,WAAOM,UAAP;AACH,GAXD;AAYH,CArDM","sourcesContent":["import {useState,useEffect} from 'react';\r\nexport const config = {\r\n    funReg : /^set/,\r\n    private: false\r\n}\r\nexport const observe = (state,options = config ) =>{\r\n    if(options.funReg === undefined) options.funReg = config.funReg;\r\n    if(options.private === undefined) options.private = config.private;\r\n    let reflashQueue = [];\r\n    let index = 0;\r\n    const renderNode = ()=>{\r\n        const length = reflashQueue.length;\r\n        for(let i=0;i<length;i++){\r\n            const {isUnmounted,state : [r,reflash],index} = reflashQueue.shift();\r\n            if(!isUnmounted){\r\n                console.log(index);\r\n                reflash(r+1 >= Number.MAX_SAFE_INTEGER - 9999 ? 0 : r + 1);\r\n            }\r\n        }\r\n    }\r\n    const stateProxy = new Proxy(state,{\r\n        get(target,key){\r\n            if(key.match(options.funReg) && options.private) {\r\n                const privateFun = (...arg)=>{\r\n                    \r\n                    target[key].apply(new Proxy(state,{\r\n                        set(target,key,value){\r\n                            target[key] = value;\r\n                            renderNode();\r\n                            return true;\r\n                        }\r\n                    }),arg)\r\n                }\r\n               \r\n                return privateFun;\r\n            }\r\n            return target[key]\r\n        },\r\n        set(target,key,value){\r\n            if(options.private) return false;\r\n            if(key.match(options.funReg)) return false;\r\n            target[key] = value;\r\n            renderNode()\r\n            return true;\r\n        }\r\n    })\r\n    return ()=>{\r\n        let state = useState(0);\r\n        const  reflash = {isUnmounted:false, state,index : index++}\r\n        reflashQueue.push(reflash);\r\n        useEffect(()=>{\r\n            return ()=>{\r\n                reflash.isUnmounted = true;\r\n                console.log(reflash);\r\n            }\r\n        },[])\r\n        return stateProxy\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}