{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const config = {\n  funReg: /^set/,\n  private: false,\n  lazy: true\n};\nexport const observe = (state, options = config) => {\n  var _s = $RefreshSig$();\n\n  if (options.funReg === undefined) options.funReg = config.funReg;\n  if (options.private === undefined) options.private = config.private;\n  if (options.lazy === undefined) options.lazy = config.lazy;\n  const reRenderMap = new Map();\n\n  const renderNode = () => {\n    for (var reRenderFun of reRenderMap.values()) {\n      reRenderFun();\n    }\n  };\n\n  const stateProxy = new Proxy(state, {\n    get(target, key) {\n      if (key.match(options.funReg) && options.private) {\n        const privateFun = (...arg) => {\n          target[key].apply(new Proxy(state, {\n            set(target, key, value) {\n              if (options.lazy && target[key] === value) return true;\n              target[key] = value;\n              renderNode();\n              return true;\n            }\n\n          }), arg);\n        };\n\n        return privateFun;\n      }\n\n      return target[key];\n    },\n\n    set(target, key, value) {\n      if (options.private) return false;\n      if (key.match(options.funReg)) return false;\n      if (options.lazy && target[key] === value) return true;\n      target[key] = value;\n      renderNode();\n      return true;\n    }\n\n  });\n  return _s(key => {\n    _s();\n\n    const [r, reflash] = useState(0);\n    reRenderMap.set(key, () => reflash(r + 1));\n    useEffect(() => {\n      return () => {\n        reRenderMap.set(key, () => {});\n      };\n    }, []);\n    return stateProxy;\n  }, \"+peOt/AzCMGYf53uARQzBAmstBU=\");\n};","map":{"version":3,"sources":["F:/erwin/example/src/utils.js"],"names":["useState","useEffect","config","funReg","private","lazy","observe","state","options","undefined","reRenderMap","Map","renderNode","reRenderFun","values","stateProxy","Proxy","get","target","key","match","privateFun","arg","apply","set","value","r","reflash"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,MAAM,EAAG,MADS;AAElBC,EAAAA,OAAO,EAAE,KAFS;AAGlBC,EAAAA,IAAI,EAAG;AAHW,CAAf;AAKP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAOC,OAAO,GAAGN,MAAjB,KAA4B;AAAA;;AAC/C,MAAGM,OAAO,CAACL,MAAR,KAAmBM,SAAtB,EAAiCD,OAAO,CAACL,MAAR,GAAiBD,MAAM,CAACC,MAAxB;AACjC,MAAGK,OAAO,CAACJ,OAAR,KAAoBK,SAAvB,EAAkCD,OAAO,CAACJ,OAAR,GAAkBF,MAAM,CAACE,OAAzB;AAClC,MAAGI,OAAO,CAACH,IAAR,KAAiBI,SAApB,EAA+BD,OAAO,CAACH,IAAR,GAAeH,MAAM,CAACG,IAAtB;AAC/B,QAAMK,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AACA,QAAMC,UAAU,GAAG,MAAI;AACnB,SAAK,IAAIC,WAAT,IAAwBH,WAAW,CAACI,MAAZ,EAAxB,EAA8C;AAC1CD,MAAAA,WAAW;AACd;AACJ,GAJD;;AAKA,QAAME,UAAU,GAAG,IAAIC,KAAJ,CAAUT,KAAV,EAAgB;AAC/BU,IAAAA,GAAG,CAACC,MAAD,EAAQC,GAAR,EAAY;AACX,UAAGA,GAAG,CAACC,KAAJ,CAAUZ,OAAO,CAACL,MAAlB,KAA6BK,OAAO,CAACJ,OAAxC,EAAiD;AAC7C,cAAMiB,UAAU,GAAG,CAAC,GAAGC,GAAJ,KAAU;AACzBJ,UAAAA,MAAM,CAACC,GAAD,CAAN,CAAYI,KAAZ,CAAkB,IAAIP,KAAJ,CAAUT,KAAV,EAAgB;AAC9BiB,YAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjB,kBAAGjB,OAAO,CAACH,IAAR,IAAgBa,MAAM,CAACC,GAAD,CAAN,KAAgBM,KAAnC,EAA0C,OAAO,IAAP;AAC1CP,cAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACAb,cAAAA,UAAU;AACV,qBAAO,IAAP;AACH;;AAN6B,WAAhB,CAAlB,EAOGU,GAPH;AAQH,SATD;;AAWA,eAAOD,UAAP;AACH;;AACD,aAAOH,MAAM,CAACC,GAAD,CAAb;AACH,KAjB8B;;AAkB/BK,IAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjB,UAAGjB,OAAO,CAACJ,OAAX,EAAoB,OAAO,KAAP;AACpB,UAAGe,GAAG,CAACC,KAAJ,CAAUZ,OAAO,CAACL,MAAlB,CAAH,EAA8B,OAAO,KAAP;AAC9B,UAAGK,OAAO,CAACH,IAAR,IAAgBa,MAAM,CAACC,GAAD,CAAN,KAAgBM,KAAnC,EAA0C,OAAO,IAAP;AAC1CP,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACAb,MAAAA,UAAU;AACV,aAAO,IAAP;AACH;;AAzB8B,GAAhB,CAAnB;AA2BA,YAAQO,GAAD,IAAO;AAAA;;AACV,UAAM,CAACO,CAAD,EAAGC,OAAH,IAAc3B,QAAQ,CAAC,CAAD,CAA5B;AACAU,IAAAA,WAAW,CAACc,GAAZ,CAAgBL,GAAhB,EAAoB,MAAIQ,OAAO,CAACD,CAAC,GAAC,CAAH,CAA/B;AACAzB,IAAAA,SAAS,CAAC,MAAI;AACV,aAAO,MAAI;AACPS,QAAAA,WAAW,CAACc,GAAZ,CAAgBL,GAAhB,EAAoB,MAAI,CAAE,CAA1B;AACH,OAFD;AAGH,KAJQ,EAIP,EAJO,CAAT;AAKA,WAAOJ,UAAP;AACH,GATD;AAUH,CA/CM","sourcesContent":["import {useState,useEffect} from 'react';\r\nexport const config = {\r\n    funReg : /^set/,\r\n    private: false,\r\n    lazy : true,\r\n}\r\nexport const observe = (state,options = config ) =>{\r\n    if(options.funReg === undefined) options.funReg = config.funReg;\r\n    if(options.private === undefined) options.private = config.private;\r\n    if(options.lazy === undefined) options.lazy = config.lazy;\r\n    const reRenderMap = new Map();\r\n    const renderNode = ()=>{\r\n        for (var reRenderFun of reRenderMap.values()) {\r\n            reRenderFun();\r\n        }\r\n    }\r\n    const stateProxy = new Proxy(state,{\r\n        get(target,key){\r\n            if(key.match(options.funReg) && options.private) {\r\n                const privateFun = (...arg)=>{\r\n                    target[key].apply(new Proxy(state,{\r\n                        set(target,key,value){\r\n                            if(options.lazy && target[key] === value) return true;\r\n                            target[key] = value;\r\n                            renderNode();\r\n                            return true;\r\n                        }\r\n                    }),arg)\r\n                }\r\n               \r\n                return privateFun;\r\n            }\r\n            return target[key]\r\n        },\r\n        set(target,key,value){\r\n            if(options.private) return false;\r\n            if(key.match(options.funReg)) return false;\r\n            if(options.lazy && target[key] === value) return true;\r\n            target[key] = value;\r\n            renderNode()\r\n            return true;\r\n        }\r\n    })\r\n    return (key)=>{\r\n        const [r,reflash] = useState(0)\r\n        reRenderMap.set(key,()=>reflash(r+1))\r\n        useEffect(()=>{\r\n            return ()=>{\r\n                reRenderMap.set(key,()=>{});\r\n            }\r\n        },[])\r\n        return stateProxy\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}