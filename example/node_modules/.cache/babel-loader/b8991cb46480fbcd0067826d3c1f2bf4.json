{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const config = {\n  funReg: /^set/,\n  private: false\n};\nexport const observe = (state, options = config) => {\n  var _s = $RefreshSig$();\n\n  if (options.funReg === undefined) options.funReg = config.funReg;\n  if (options.private === undefined) options.private = config.private; // const reflashQueue = [];\n\n  const reRenderMap = new Map();\n  let index = 0;\n\n  const renderNode = () => {\n    // const length = reflashQueue.length;\n    // for(let i=0;i<length-index;i++){\n    //     reflashQueue.shift()();\n    // }\n    // index = 0;\n    for (var reRenderFun of reRenderMap.values()) {\n      reRenderFun();\n    }\n  };\n\n  const stateProxy = new Proxy(state, {\n    get(target, key) {\n      if (key.match(options.funReg) && options.private) {\n        const privateFun = (...arg) => {\n          target[key].apply(new Proxy(state, {\n            set(target, key, value) {\n              target[key] = value;\n              renderNode();\n              return true;\n            }\n\n          }), arg);\n        };\n\n        return privateFun;\n      }\n\n      return target[key];\n    },\n\n    set(target, key, value) {\n      if (options.private) return false;\n      if (key.match(options.funReg)) return false;\n      console.log(value);\n      target[key] = value;\n      renderNode();\n      return true;\n    }\n\n  });\n  return _s(key => {\n    _s();\n\n    const [r, reflash] = useState(0);\n\n    const reRenderFun = () => reflash(r + 1); // reflashQueue.push(()=>reflash(r+1))\n\n\n    reRenderMap.set(key, reRenderFun);\n    useEffect(() => {\n      return () => {\n        reRenderMap.set(key, () => {}); // reflashQueue.splice(reflashQueue.findIndex(item=>state===item),1);\n        // index ++;\n      };\n    });\n    return stateProxy;\n  }, \"+peOt/AzCMGYf53uARQzBAmstBU=\");\n};","map":{"version":3,"sources":["F:/erwin/example/src/utils.js"],"names":["useState","useEffect","config","funReg","private","observe","state","options","undefined","reRenderMap","Map","index","renderNode","reRenderFun","values","stateProxy","Proxy","get","target","key","match","privateFun","arg","apply","set","value","console","log","r","reflash"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,MAAM,EAAG,MADS;AAElBC,EAAAA,OAAO,EAAE;AAFS,CAAf;AAIP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAOC,OAAO,GAAGL,MAAjB,KAA4B;AAAA;;AAC/C,MAAGK,OAAO,CAACJ,MAAR,KAAmBK,SAAtB,EAAiCD,OAAO,CAACJ,MAAR,GAAiBD,MAAM,CAACC,MAAxB;AACjC,MAAGI,OAAO,CAACH,OAAR,KAAoBI,SAAvB,EAAkCD,OAAO,CAACH,OAAR,GAAkBF,MAAM,CAACE,OAAzB,CAFa,CAG/C;;AACA,QAAMK,WAAW,GAAG,IAAIC,GAAJ,EAApB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,QAAMC,UAAU,GAAG,MAAI;AACnB;AACA;AACA;AACA;AACA;AACA,SAAK,IAAIC,WAAT,IAAwBJ,WAAW,CAACK,MAAZ,EAAxB,EAA8C;AAC1CD,MAAAA,WAAW;AACd;AACJ,GATD;;AAUA,QAAME,UAAU,GAAG,IAAIC,KAAJ,CAAUV,KAAV,EAAgB;AAC/BW,IAAAA,GAAG,CAACC,MAAD,EAAQC,GAAR,EAAY;AACX,UAAGA,GAAG,CAACC,KAAJ,CAAUb,OAAO,CAACJ,MAAlB,KAA6BI,OAAO,CAACH,OAAxC,EAAiD;AAC7C,cAAMiB,UAAU,GAAG,CAAC,GAAGC,GAAJ,KAAU;AACzBJ,UAAAA,MAAM,CAACC,GAAD,CAAN,CAAYI,KAAZ,CAAkB,IAAIP,KAAJ,CAAUV,KAAV,EAAgB;AAC9BkB,YAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjBP,cAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACAb,cAAAA,UAAU;AACV,qBAAO,IAAP;AACH;;AAL6B,WAAhB,CAAlB,EAMGU,GANH;AAOH,SARD;;AAUA,eAAOD,UAAP;AACH;;AACD,aAAOH,MAAM,CAACC,GAAD,CAAb;AACH,KAhB8B;;AAiB/BK,IAAAA,GAAG,CAACN,MAAD,EAAQC,GAAR,EAAYM,KAAZ,EAAkB;AACjB,UAAGlB,OAAO,CAACH,OAAX,EAAoB,OAAO,KAAP;AACpB,UAAGe,GAAG,CAACC,KAAJ,CAAUb,OAAO,CAACJ,MAAlB,CAAH,EAA8B,OAAO,KAAP;AAC9BuB,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcM,KAAd;AACAb,MAAAA,UAAU;AACV,aAAO,IAAP;AACH;;AAxB8B,GAAhB,CAAnB;AA0BA,YAAQO,GAAD,IAAO;AAAA;;AACV,UAAM,CAACS,CAAD,EAAGC,OAAH,IAAc7B,QAAQ,CAAC,CAAD,CAA5B;;AACA,UAAMa,WAAW,GAAG,MAAIgB,OAAO,CAACD,CAAC,GAAC,CAAH,CAA/B,CAFU,CAGV;;;AACAnB,IAAAA,WAAW,CAACe,GAAZ,CAAgBL,GAAhB,EAAoBN,WAApB;AACAZ,IAAAA,SAAS,CAAC,MAAI;AACV,aAAO,MAAI;AACPQ,QAAAA,WAAW,CAACe,GAAZ,CAAgBL,GAAhB,EAAoB,MAAI,CAAE,CAA1B,EADO,CAEP;AACA;AACH,OAJD;AAKH,KANQ,CAAT;AAOA,WAAOJ,UAAP;AACH,GAbD;AAcH,CAxDM","sourcesContent":["import {useState,useEffect} from 'react';\r\nexport const config = {\r\n    funReg : /^set/,\r\n    private: false\r\n}\r\nexport const observe = (state,options = config ) =>{\r\n    if(options.funReg === undefined) options.funReg = config.funReg;\r\n    if(options.private === undefined) options.private = config.private;\r\n    // const reflashQueue = [];\r\n    const reRenderMap = new Map();\r\n    let index = 0;\r\n    const renderNode = ()=>{\r\n        // const length = reflashQueue.length;\r\n        // for(let i=0;i<length-index;i++){\r\n        //     reflashQueue.shift()();\r\n        // }\r\n        // index = 0;\r\n        for (var reRenderFun of reRenderMap.values()) {\r\n            reRenderFun();\r\n        }\r\n    }\r\n    const stateProxy = new Proxy(state,{\r\n        get(target,key){\r\n            if(key.match(options.funReg) && options.private) {\r\n                const privateFun = (...arg)=>{\r\n                    target[key].apply(new Proxy(state,{\r\n                        set(target,key,value){\r\n                            target[key] = value;\r\n                            renderNode();\r\n                            return true;\r\n                        }\r\n                    }),arg)\r\n                }\r\n               \r\n                return privateFun;\r\n            }\r\n            return target[key]\r\n        },\r\n        set(target,key,value){\r\n            if(options.private) return false;\r\n            if(key.match(options.funReg)) return false;\r\n            console.log(value);\r\n            target[key] = value;\r\n            renderNode()\r\n            return true;\r\n        }\r\n    })\r\n    return (key)=>{\r\n        const [r,reflash] = useState(0)\r\n        const reRenderFun = ()=>reflash(r+1);\r\n        // reflashQueue.push(()=>reflash(r+1))\r\n        reRenderMap.set(key,reRenderFun)\r\n        useEffect(()=>{\r\n            return ()=>{\r\n                reRenderMap.set(key,()=>{});\r\n                // reflashQueue.splice(reflashQueue.findIndex(item=>state===item),1);\r\n                // index ++;\r\n            }\r\n        })\r\n        return stateProxy\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}